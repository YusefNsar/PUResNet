/* ___________________________________________________________________________  Voel Substring By me **__________________________________________________________ */


char* findSubst5ring(char* s, int k) {
    char* voel = calloc(k , sizeof(char));
    int i = 0;
    int count = 0;
    int max = 0;
    int index =0;
    while(s[i])
    {
         if (s[i] == 'i' || s[i] == 'o' || s[i] == 'e'  || s[i] == 'a' || s[i] == 'u')
         {
            if (i >= k)
            {
                if (voel[i%k] != 1)
                {
                    count++;
                    voel[i%k] = 1;
                }
            }
            else {
                count++;
                voel[i%k] = 1;
            }
         }
         else if (i >= k)
         {
            if (voel[i%k] == 1)
                {
                    count--;
                    voel[i%k] = 0;
                }
         }

         if (i >= k-1)
         {
            if (count == k)
                {
                    index = i;
                    max = count;
                    break;
                }
            else if (count > max)
            {
                max = count;
                index = i;
            }
         }  

        i++;

    }

    if (max == 0)
        return "Not found!\0";
           
    int n = index - k + 1;    
    for (int j = 0 ; j < k ; j++)
    {
       voel[j] =  s[n+j]; 
    }
    return voel;
}

/* ___________________________________________________________________________  Max cost (By Me) **__________________________________________________________ */
#define MAXCP(a,b) ( a >= b ? a : b  )

int maxCost(int cost_count, int* cost, int labels_count, char** labels, int dailyCount) {
    int dailycounttemp = dailyCount;
    int legalsN = 0;
    int costlegal = 0;
    int costMAX = 0;

    
    for(int i = 0 ; i < labels_count ; i++)
    {   
            if(strcmp(labels[i], "legal") == 0)
            {
                dailycounttemp--;
                costlegal +=  cost[i];               
            }
            else
            {
                costlegal +=  cost[i];
            }
            
            if (dailycounttemp == 0)
            {
            costMAX = MAXCP(costMAX,costlegal);
            costlegal = 0;
            dailycounttemp = dailyCount;               
            }
    
    }
    return costMAX;

}

/* ___________________________________________________________________________ longestSubarray By Me ** __________________________________________________________ */

#define MAX(a,b) (a>b ? a:b)

int longestSubarray(int arr_count, int* arr) {
    int minindex = 0;
    int maxindex = 0;
    int max = arr[0];
    int min = arr[0];
    int count = 1;
    int bestcount =0;
    for (int i = 0 ; i < arr_count ; i++)
    {   
        if (min >= arr[i])
        {
            min = arr[i];
            minindex = i;
        }
        
        if (max <= arr[i])
        {
            max = arr[i];
            maxindex = i;
        }
        
        if (abs(max-min) <= 1 && i !=0 )
        {
            count++;
        }
        else if(abs(max-min) > 1)
        {
            bestcount =  MAX(bestcount,count);
            if (maxindex < minindex)
            {
                i = maxindex ;
                max = arr[i+1];
                min = arr[i+1]; 
                count = 0;
            }
            else
            {   
                i=minindex ;
                max = arr[i+1];
                min = arr[i+1]; 
                count = 0;
            }
        }       

    }
    bestcount =  MAX(bestcount,count);
return bestcount;
}

/* ___________________________________________________________________________ Active Traders by me ** __________________________________________________________ */

int cmp(const void **a,const void **b)
{
    return strcmp(*(char **)a,*(char **)b);
}

char** mostActive(int customers_count, char** customers, int* result_count) {
    qsort(customers, customers_count, sizeof(char *), cmp);
    char **result = calloc(customers_count, sizeof(char*));
    int resultcount = 0;
    char *temp = calloc(strlen(customers[0]), sizeof(char));
    strcpy(temp, customers[0]);
    int count = 0;
    int i = 0 ;
    for ( i = 0 ; i <  customers_count ; i++)
    {
        if (strcmp(temp, customers[i]) == 0)
        {
            count++;
            continue;
        }else
        {   
            if (count >= 0.05 * customers_count  )
                {
                    result[resultcount] = customers[i-1];
                    resultcount++;
                }
            free(temp);
            temp = calloc(strlen(customers[i]), sizeof(char));
            strcpy(temp, customers[i]);
            count = 1;
        }
        
    }
    if (count >= 0.05 * customers_count  )
                {
                    result[resultcount] = customers[i-1];
                    resultcount++;
                }
                
    *result_count = resultcount;
    return result;
}

/* _____________________________________________________________________nearly Similar Rectangles  __________________________________________________________ */

/*
a: 10 b: 7 
a: 7 b: 3 
a: 3 b: 1 
a: 1 b: 0 
z: 1 
a: 6 b: 9 
a: 9 b: 6 
a: 6 b: 3 
a: 3 b: 0 
*/

long gcd(long a, long b) // Greatest Common Divisor Function
{                        //                8
    return b > 0 ? gcd(b, a % b) : a;
}



long compare(const long *a, const long *b) // Compare Function To Sort 2D Array
{
    return (*a - *b) ? (*a - *b) : (*(a + 1) - *(b + 1));
}

long nearlySimilarRectangles(int sides_rows, int sides_columns, long **sides)
{

    long arr[sides_rows][2];
    for (int i = 0; i < sides_rows; i++)
    {
        long z = gcd(sides[i][0], sides[i][1]);
        arr[i][0] = sides[i][0] / z;
        arr[i][1] = sides[i][1] / z;
    }
    qsort(arr, sides_rows, sizeof(arr[0]), compare);
    long count = 1;
    long sum = 0;
    long acc = 0;
    for (int i = 0; i < sides_rows - 1; i++)
    {
        if (arr[i][0] == arr[i + 1][0] && arr[i][1] == arr[i + 1][1])
        {
            count++;
            acc = ((count * (count - 1)) / 2); // n(n-1)/2
            continue;
        }
        sum += acc;
        count = 1;
        acc = 0;
    }
    sum += acc;
    return sum;
}

/* _____________________________________________________________________Parrell processing By me ** __________________________________________________________ */




int cmpfunc (const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
}

 
long minTime(int files_count, int* files, int numCores, int limit) {
    qsort(files,files_count , sizeof(int), cmpfunc);
    long min = 0;
    for (int i = files_count-1; i >= 0; i-- )
    {
       if (files[i] % numCores != 0 || limit == 0)
        min += files[i];
       else
       {
           limit--;
           min += files[i]/numCores;
       }
    }
    return min;
}


/* _____________________________________________________________________ decrypt password By me ** __________________________________________________________ */

char* decryptPassword(char* s) {
    char * result =0;
    int * numbersstack =0;
    int firstnumberstack = 0;
    int resultlenght = 1;
    int flagnumbers = 1;
    int i = 0;
    char temp = 0;

    for (i = strlen(s) - 1 ; i != 0 ;i--)
    {
        if (s[i] == '0' )
        {
            
           s[i]= s[firstnumberstack] ;
           s[firstnumberstack] = -1;
           resultlenght++;
           firstnumberstack++;
           continue;
        }
        else if(s[i] == '*' && i >= 2)
        {
            if(s[i-1] >= 'a' &&  s[i-1] <= 'z')
            {
                 if(s[i-2] >= 'A' &&  s[i-2] <= 'Z')
                 {
                     s[i] = -1;
                     temp = s[i-2];
                     s[i-2] = s[i-1];
                     s[i-1] = temp;
                     i = i - 2; 
                     resultlenght = resultlenght+2;
                     continue;
                 }
            }  
        }
        resultlenght++; 
    }
    resultlenght++;
    
     result = (char *)realloc(result,resultlenght * sizeof(char));
     resultlenght = 0;
     for (i = 0  ; i  < strlen(s) ;i++)
    {
        if (s[i] == -1)
            continue;
        result [resultlenght++] =   s[i];
    }
    result [resultlenght] = '\0';
    return result;
}

/* _____________________________________________________________________ road repair By me ** __________________________________________________________ */

int cmpfunc (const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
}

long getMinCost(int crew_id_count, int* crew_id, int job_id_count, int* job_id) {
    
        qsort(crew_id,crew_id_count , sizeof(int), cmpfunc);
        qsort(job_id,job_id_count , sizeof(int), cmpfunc);
        long min = 0;
        for (int i = 0 ; i < job_id_count ; i++)
        {
            min += abs(crew_id[i] - job_id[i]);
        }

return min;

}

/* _____________________________________________________________________  sub array sum __________________________________________________________ */
long* findSum(int numbers_count, int* numbers, int queries_rows, int queries_columns, int** queries, int* result_count) {
        
    long* numbersC = calloc(numbers_count + 1, sizeof(long));
    long* zerosC = calloc(numbers_count + 1, sizeof(long));
    long* results = calloc(queries_rows , sizeof(long));
    long s =0, e=0,x=0 , i=0;
    /*______________________*/
    for ( i = 1 ; i <= numbers_count ;  i++)
    {
        numbersC[i] = numbers[i-1] + numbersC[i-1];
        zerosC[i] = zerosC[i-1] +  (numbers[i-1] == 0);
    }
    /* ____________________________ */
    
    for ( i = 0 ; i < queries_rows ;  i++)
    {
        s = queries[i][0];
        e = queries[i][1];
        x = queries[i][2];
        results[i] = numbersC[e] - numbersC[s-1] + x*(zerosC[e] - zerosC[s-1]);
    }
    
    *result_count = queries_rows;
    return results;
    
 
}

/* _____________________________________________________________________  most Balanced Partition trees  __________________________________________________________ */

int mostBalancedPartition(int parent_count, int *parent, int files_size_count, int *files_size)
{
    for (int i = parent_count - 1; i > 0; i--)
    {
        files_size[parent[i]] += files_size[i];
    }
    int mindiff = files_size[0];
    int diff = mindiff;
    for (int i = 1; i < files_size_count; i++)
    {
        diff = abs(files_size[0] - 2 * files_size[i]);
        mindiff = (diff < mindiff) ? diff : mindiff;
    }
    return mindiff;
}
/* _____________________________________________________________________  usernames changes by me **__________________________________________________________ */

    

int cmpfunc( const void *a, const void *b) {
  return *(char*)a - *(char*)b;
}

char** possibleChanges(int usernames_count, char** usernames, int* result_count) {
    char  **ans = (char **)calloc(usernames_count , sizeof(char *));
    char *yes = "YES";
    char* no = "NO";
    
    for(int i = 0 ; i < usernames_count ; i++){
        char *temp = (char *)calloc(strlen(usernames[i])+1, sizeof(char));
        strcpy(temp, usernames[i]);
        qsort(temp,strlen(temp),sizeof(char),cmpfunc);
        
        if (strcmp(temp,usernames[i]) == 0 )
        {
            ans[i] = no;
        }
        else
        {
            ans[i] = yes;
        }
    }
    *result_count = usernames_count;
    return ans;

}
/* _____________________________________________________________________  unexpacaced demandes by me **__________________________________________________________ */

int cmp (const void * a, const void * b)
{
    return (*(int *)a - *(int *)b);
}
int filledOrders(int order_count, int* order, int k) {
    qsort(order,order_count, sizeof(int), cmp);
    int counter = 0;
    for (int i = 0 ; i < order_count; i++){
        if (order[i] <= k)
        {
            counter++;
            k -= order[i] ;
        }
        if (k <= 0)
        {
            break;
        } 
    }    
    return counter;
}

/* _________________________ anagrams ________________ Under Coding */
